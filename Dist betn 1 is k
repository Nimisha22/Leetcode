Given an array nums of 0s and 1s and an integer k, return True if all 1's are at least k places away from each other, otherwise return False.

Input: nums = [1,0,0,0,1,0,0,1], k = 2
Output: true
Explanation: Each of the 1s are at least 2 places away from each other.

Example 2:
Input: nums = [1,0,0,1,0,1], k = 2
Output: false
Explanation: The second 1 and third 1 are only one apart from each other.

Example 3:
Input: nums = [1,1,1,1,1], k = 0
Output: true

Example 4:
Input: nums = [0,1,0,1], k = 1
Output: true
 

Constraints:

1 <= nums.length <= 10^5
0 <= k <= nums.length
nums[i] is 0 or 1

------------------------------------------------------------------------------
Code

class Solution {
public:
   bool kLengthApart(vector<int>& nums, int k) {
        int start = 0, end = 0;
        int n = nums.size();
		    //apply sliding window technique.
        while(end < n) {
            if(nums[end] == 1) {
				        //if you encounter  distance between two 1's less than k then return false.
                if(nums[start] == 1 && end != start && end - start <= k) {
                    return false;
                } else {
					          //decrease window size.
                    start=end;
                }  
            }
			      //increase window size.
            end++;
        }
        return true;
    }
};
